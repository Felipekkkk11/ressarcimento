/* 
 * Plataforma de Ressarcimento do Open Banking Brasil
 *
 * APIs da plataforma de Ressarcimento do Open Banking Brasil para a comunicação online com a plaforma. Através da documentação das APIs abaixo é possível realizar os devidos testes de integração.
 *
 * OpenAPI spec version: beta-0.0.1
 * Contact: suporte-ressarcimento@openbankingbrasil.org.br
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RefundNotification
    /// </summary>
    [DataContract]
        public partial class RefundNotification :  IEquatable<RefundNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefundNotification" /> class.
        /// </summary>
        /// <param name="timestamp">timestamp (required).</param>
        /// <param name="sessionToken">sessionToken (required).</param>
        /// <param name="clientId">clientId (required).</param>
        /// <param name="receiverId">receiverId (required).</param>
        /// <param name="transmitterId">transmitterId (required).</param>
        /// <param name="uri">uri (required).</param>
        /// <param name="statusCode">statusCode (required).</param>
        /// <param name="payloadSize">payloadSize (required).</param>
        /// <param name="processTimespan">processTimespan (required).</param>
        public RefundNotification(string timestamp = default(string), string sessionToken = default(string), string clientId = default(string), string receiverId = default(string), string transmitterId = default(string), string uri = default(string), int? statusCode = default(int?), long? payloadSize = default(long?), long? processTimespan = default(long?))
        {
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new InvalidDataException("timestamp is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.Timestamp = timestamp;
            }
            // to ensure "sessionToken" is required (not null)
            if (sessionToken == null)
            {
                throw new InvalidDataException("sessionToken is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.SessionToken = sessionToken;
            }
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "receiverId" is required (not null)
            if (receiverId == null)
            {
                throw new InvalidDataException("receiverId is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.ReceiverId = receiverId;
            }
            // to ensure "transmitterId" is required (not null)
            if (transmitterId == null)
            {
                throw new InvalidDataException("transmitterId is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.TransmitterId = transmitterId;
            }
            // to ensure "uri" is required (not null)
            if (uri == null)
            {
                throw new InvalidDataException("uri is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.Uri = uri;
            }
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new InvalidDataException("statusCode is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.StatusCode = statusCode;
            }
            // to ensure "payloadSize" is required (not null)
            if (payloadSize == null)
            {
                throw new InvalidDataException("payloadSize is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.PayloadSize = payloadSize;
            }
            // to ensure "processTimespan" is required (not null)
            if (processTimespan == null)
            {
                throw new InvalidDataException("processTimespan is a required property for RefundNotification and cannot be null");
            }
            else
            {
                this.ProcessTimespan = processTimespan;
            }
        }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets SessionToken
        /// </summary>
        [DataMember(Name="sessionToken", EmitDefaultValue=false)]
        public string SessionToken { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="clientId", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverId
        /// </summary>
        [DataMember(Name="receiverId", EmitDefaultValue=false)]
        public string ReceiverId { get; set; }

        /// <summary>
        /// Gets or Sets TransmitterId
        /// </summary>
        [DataMember(Name="transmitterId", EmitDefaultValue=false)]
        public string TransmitterId { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name="uri", EmitDefaultValue=false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets PayloadSize
        /// </summary>
        [DataMember(Name="payloadSize", EmitDefaultValue=false)]
        public long? PayloadSize { get; set; }

        /// <summary>
        /// Gets or Sets ProcessTimespan
        /// </summary>
        [DataMember(Name="processTimespan", EmitDefaultValue=false)]
        public long? ProcessTimespan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RefundNotification {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ReceiverId: ").Append(ReceiverId).Append("\n");
            sb.Append("  TransmitterId: ").Append(TransmitterId).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  PayloadSize: ").Append(PayloadSize).Append("\n");
            sb.Append("  ProcessTimespan: ").Append(ProcessTimespan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefundNotification);
        }

        /// <summary>
        /// Returns true if RefundNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of RefundNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefundNotification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.SessionToken == input.SessionToken ||
                    (this.SessionToken != null &&
                    this.SessionToken.Equals(input.SessionToken))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ReceiverId == input.ReceiverId ||
                    (this.ReceiverId != null &&
                    this.ReceiverId.Equals(input.ReceiverId))
                ) && 
                (
                    this.TransmitterId == input.TransmitterId ||
                    (this.TransmitterId != null &&
                    this.TransmitterId.Equals(input.TransmitterId))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.PayloadSize == input.PayloadSize ||
                    (this.PayloadSize != null &&
                    this.PayloadSize.Equals(input.PayloadSize))
                ) && 
                (
                    this.ProcessTimespan == input.ProcessTimespan ||
                    (this.ProcessTimespan != null &&
                    this.ProcessTimespan.Equals(input.ProcessTimespan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.SessionToken != null)
                    hashCode = hashCode * 59 + this.SessionToken.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ReceiverId != null)
                    hashCode = hashCode * 59 + this.ReceiverId.GetHashCode();
                if (this.TransmitterId != null)
                    hashCode = hashCode * 59 + this.TransmitterId.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.PayloadSize != null)
                    hashCode = hashCode * 59 + this.PayloadSize.GetHashCode();
                if (this.ProcessTimespan != null)
                    hashCode = hashCode * 59 + this.ProcessTimespan.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
