/*
 * Plataforma de Ressarcimento do Open Banking Brasil
 * APIs da plataforma de Ressarcimento do Open Banking Brasil para a comunicação online com a plaforma. Através da documentação das APIs abaixo é possível realizar os devidos testes de integração.
 *
 * OpenAPI spec version: beta-0.0.1
 * Contact: suporte-ressarcimento@openbankingbrasil.org.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.27
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PlataformaDeRessarcimentoDoOpenBankingBrasil);
  }
}(this, function(expect, PlataformaDeRessarcimentoDoOpenBankingBrasil) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PlataformaDeRessarcimentoDoOpenBankingBrasil.RefundAPIV1Api();
  });

  describe('(package)', function() {
    describe('RefundAPIV1Api', function() {
      describe('findNotificationById', function() {
        it('should call findNotificationById successfully', function(done) {
          // TODO: uncomment, update parameter values for findNotificationById call and complete the assertions
          /*

          instance.findNotificationById(processId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PlataformaDeRessarcimentoDoOpenBankingBrasil.RefundProcess);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('healthcheck', function() {
        it('should call healthcheck successfully', function(done) {
          // TODO: uncomment healthcheck call and complete the assertions
          /*

          instance.healthcheck(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PlataformaDeRessarcimentoDoOpenBankingBrasil.RefundProcess);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('notification', function() {
        it('should call notification successfully', function(done) {
          // TODO: uncomment, update parameter values for notification call and complete the assertions
          /*

          instance.notification(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PlataformaDeRessarcimentoDoOpenBankingBrasil.RefundProcess);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('notifications', function() {
        it('should call notifications successfully', function(done) {
          // TODO: uncomment, update parameter values for notifications call and complete the assertions
          /*

          instance.notifications(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PlataformaDeRessarcimentoDoOpenBankingBrasil.RefundProcess);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
