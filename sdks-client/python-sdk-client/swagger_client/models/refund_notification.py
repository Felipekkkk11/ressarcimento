# coding: utf-8

"""
    Plataforma de Ressarcimento do Open Banking Brasil

    APIs da plataforma de Ressarcimento do Open Banking Brasil para a comunicação online com a plaforma. Através da documentação das APIs abaixo é possível realizar os devidos testes de integração.  # noqa: E501

    OpenAPI spec version: beta-0.0.1
    Contact: suporte-ressarcimento@openbankingbrasil.org.br
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RefundNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'session_token': 'str',
        'client_id': 'str',
        'receiver_id': 'str',
        'transmitter_id': 'str',
        'uri': 'str',
        'status_code': 'int',
        'payload_size': 'int',
        'process_timespan': 'int'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'session_token': 'sessionToken',
        'client_id': 'clientId',
        'receiver_id': 'receiverId',
        'transmitter_id': 'transmitterId',
        'uri': 'uri',
        'status_code': 'statusCode',
        'payload_size': 'payloadSize',
        'process_timespan': 'processTimespan'
    }

    def __init__(self, timestamp=None, session_token=None, client_id=None, receiver_id=None, transmitter_id=None, uri=None, status_code=None, payload_size=None, process_timespan=None):  # noqa: E501
        """RefundNotification - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._session_token = None
        self._client_id = None
        self._receiver_id = None
        self._transmitter_id = None
        self._uri = None
        self._status_code = None
        self._payload_size = None
        self._process_timespan = None
        self.discriminator = None
        self.timestamp = timestamp
        self.session_token = session_token
        self.client_id = client_id
        self.receiver_id = receiver_id
        self.transmitter_id = transmitter_id
        self.uri = uri
        self.status_code = status_code
        self.payload_size = payload_size
        self.process_timespan = process_timespan

    @property
    def timestamp(self):
        """Gets the timestamp of this RefundNotification.  # noqa: E501


        :return: The timestamp of this RefundNotification.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RefundNotification.


        :param timestamp: The timestamp of this RefundNotification.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def session_token(self):
        """Gets the session_token of this RefundNotification.  # noqa: E501


        :return: The session_token of this RefundNotification.  # noqa: E501
        :rtype: str
        """
        return self._session_token

    @session_token.setter
    def session_token(self, session_token):
        """Sets the session_token of this RefundNotification.


        :param session_token: The session_token of this RefundNotification.  # noqa: E501
        :type: str
        """
        if session_token is None:
            raise ValueError("Invalid value for `session_token`, must not be `None`")  # noqa: E501

        self._session_token = session_token

    @property
    def client_id(self):
        """Gets the client_id of this RefundNotification.  # noqa: E501


        :return: The client_id of this RefundNotification.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RefundNotification.


        :param client_id: The client_id of this RefundNotification.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def receiver_id(self):
        """Gets the receiver_id of this RefundNotification.  # noqa: E501


        :return: The receiver_id of this RefundNotification.  # noqa: E501
        :rtype: str
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this RefundNotification.


        :param receiver_id: The receiver_id of this RefundNotification.  # noqa: E501
        :type: str
        """
        if receiver_id is None:
            raise ValueError("Invalid value for `receiver_id`, must not be `None`")  # noqa: E501

        self._receiver_id = receiver_id

    @property
    def transmitter_id(self):
        """Gets the transmitter_id of this RefundNotification.  # noqa: E501


        :return: The transmitter_id of this RefundNotification.  # noqa: E501
        :rtype: str
        """
        return self._transmitter_id

    @transmitter_id.setter
    def transmitter_id(self, transmitter_id):
        """Sets the transmitter_id of this RefundNotification.


        :param transmitter_id: The transmitter_id of this RefundNotification.  # noqa: E501
        :type: str
        """
        if transmitter_id is None:
            raise ValueError("Invalid value for `transmitter_id`, must not be `None`")  # noqa: E501

        self._transmitter_id = transmitter_id

    @property
    def uri(self):
        """Gets the uri of this RefundNotification.  # noqa: E501


        :return: The uri of this RefundNotification.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this RefundNotification.


        :param uri: The uri of this RefundNotification.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def status_code(self):
        """Gets the status_code of this RefundNotification.  # noqa: E501


        :return: The status_code of this RefundNotification.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this RefundNotification.


        :param status_code: The status_code of this RefundNotification.  # noqa: E501
        :type: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")  # noqa: E501

        self._status_code = status_code

    @property
    def payload_size(self):
        """Gets the payload_size of this RefundNotification.  # noqa: E501


        :return: The payload_size of this RefundNotification.  # noqa: E501
        :rtype: int
        """
        return self._payload_size

    @payload_size.setter
    def payload_size(self, payload_size):
        """Sets the payload_size of this RefundNotification.


        :param payload_size: The payload_size of this RefundNotification.  # noqa: E501
        :type: int
        """
        if payload_size is None:
            raise ValueError("Invalid value for `payload_size`, must not be `None`")  # noqa: E501

        self._payload_size = payload_size

    @property
    def process_timespan(self):
        """Gets the process_timespan of this RefundNotification.  # noqa: E501


        :return: The process_timespan of this RefundNotification.  # noqa: E501
        :rtype: int
        """
        return self._process_timespan

    @process_timespan.setter
    def process_timespan(self, process_timespan):
        """Sets the process_timespan of this RefundNotification.


        :param process_timespan: The process_timespan of this RefundNotification.  # noqa: E501
        :type: int
        """
        if process_timespan is None:
            raise ValueError("Invalid value for `process_timespan`, must not be `None`")  # noqa: E501

        self._process_timespan = process_timespan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefundNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
